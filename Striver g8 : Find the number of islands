question : https://practice.geeksforgeeks.org/problems/find-the-number-of-islands/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=
           find_the_number_of_islands
           
           
           
code in java :

class Solution {
    // Function to find the number of islands.
    class pair{
		int x;
		int y;
		pair(int x,int y){
			this.x=x;
			this.y=y;
		}
	}
    public int numIslands(char[][] grid) {
        // Code here
        boolean vis[][]=new boolean[grid.length][grid[0].length];
        int n=grid.length;
        int m=grid[0].length;
        int no_island=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1' && vis[i][j]==false){
                    no_island++;
                    bfs(i,j,grid,vis);
                }
            }
        }
        return no_island;
    }
    void bfs(int r,int c,char g[][],boolean vis[][]){
        Queue<pair>q=new LinkedList<>();
        q.add(new pair(r,c));
        vis[r][c]=true;
        while(!q.isEmpty()){
            //8 moves
            
            int row=q.peek().x;
            int col=q.peek().y;
            q.poll();
            if(row>0){
                if(g[row-1][col]=='1' && vis[row-1][col]==false){//up move
                    vis[row-1][col]=true;
                q.add(new pair(row-1,col));
                }
            }
            if(col>0){//left
                if(g[row][col-1]=='1' && vis[row][col-1]==false){
                    vis[row][col-1]=true;
                q.add(new pair(row,col-1));
                }
            }
            if(row>0 && col>0){
                if(g[row-1][col-1]=='1' && vis[row-1][col-1]==false){//left-up move
                    vis[row-1][col-1]=true;
                    q.add(new pair(row-1,col-1));
                }
            }
            if(row>0 && col+1<g[0].length){
                if(g[row-1][col+1]=='1' && vis[row-1][col+1]==false){//right-up move
                    vis[row-1][col+1]=true;
                    q.add(new pair(row-1,col+1));
                }
            }
            if(col+1<g[0].length){//right
                if(g[row][col+1]=='1' && vis[row][col+1]==false){
                    vis[row][col+1]=true;
                q.add(new pair(row,col+1));
                }
            }
            if(row+1<g.length){//down
                if(g[row+1][col]=='1' && vis[row+1][col]==false){
                    vis[row+1][col]=true;
                q.add(new pair(row+1,col));
                }
            }
            if(row+1<g.length && col+1<g[0].length){
                if(g[row+1][col+1]=='1' && vis[row+1][col+1]==false){//right-down move
                    vis[row+1][col+1]=true;
                    q.add(new pair(row+1,col+1));
                }
            }
            if(row+1<g.length && col>0){
                if(g[row+1][col-1]=='1' && vis[row+1][col-1]==false){//left-down move
                    vis[row+1][col-1]=true;
                    q.add(new pair(row+1,col-1));
                }
            }
        }
    }
}
